#!/usr/bin/env bash
# Knowledge System Environment Configuration
# Source this file in all tools: source "${0%/*}/../../.ks-env"
# Then source needed libraries directly: source "$KS_ROOT/lib/core.sh"

# === MODERN TOOL SETUP ===
# Set up PATH to prioritize modern versions of tools (bash 5.x, GNU tools on macOS)

_setup_ks_tools() {
    # Create KS bin directory for normalized tool names
    local ks_bin="$KS_ROOT/bin"
    mkdir -p "$ks_bin"
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS - Set up symlinks to Homebrew versions with standard names
        
        # Check and install required tools
        local required_tools=(bash coreutils findutils util-linux)
        for tool in "${required_tools[@]}"; do
            if ! brew list "$tool" >/dev/null 2>&1; then
                echo "Installing $tool via Homebrew..." >&2
                brew install "$tool"
            fi
        done
        
        # Create symlinks with standard names pointing to modern versions
        local tool_mappings=(
            "bash:/opt/homebrew/bin/bash"
            "date:/opt/homebrew/bin/gdate"
            "find:/opt/homebrew/bin/gfind" 
            "stat:/opt/homebrew/bin/gstat"
            "getopt:/opt/homebrew/opt/util-linux/bin/getopt"
            "flock:/opt/homebrew/bin/flock"
        )
        
        # Add Claude CLI if available (typically from NVM Node.js installation)
        # Skip our own bin directory to avoid circular symlinks
        local claude_path=$(PATH="${PATH//$ks_bin:/}" command -v claude 2>/dev/null)
        if [[ -n "$claude_path" && "$claude_path" != "$ks_bin"* ]]; then
            tool_mappings+=("claude:$claude_path")
        fi
        
        for mapping in "${tool_mappings[@]}"; do
            local name="${mapping%%:*}"
            local target="${mapping##*:}"
            local link="$ks_bin/$name"
            
            if [[ -x "$target" ]]; then
                # Remove existing symlink and create new one
                rm -f "$link"
                ln -s "$target" "$link"
            else
                echo "Warning: Tool not found: $target" >&2
            fi
        done
        
    else
        # Linux - tools should already be modern, but create symlinks for consistency
        local standard_tools=(bash date find stat getopt flock)
        
        # Add Claude CLI if available
        # Skip our own bin directory to avoid circular symlinks
        local claude_path=$(PATH="${PATH//$ks_bin:/}" command -v claude 2>/dev/null)
        if [[ -n "$claude_path" && "$claude_path" != "$ks_bin"* ]]; then
            standard_tools+=(claude)
        fi
        
        for tool in "${standard_tools[@]}"; do
            local tool_path=$(command -v "$tool" 2>/dev/null)
            if [[ -n "$tool_path" ]]; then
                rm -f "$ks_bin/$tool"
                ln -s "$tool_path" "$ks_bin/$tool"
            fi
        done
    fi
    
    # Save original PATH if not already saved, then prepend KS bin
    if [[ -z "${KS_ORIGINAL_PATH:-}" ]]; then
        export KS_ORIGINAL_PATH="$PATH"
    fi
    
    # Only prepend KS bin if not already in PATH
    if [[ ":$PATH:" != *":$ks_bin:"* ]]; then
        export PATH="$ks_bin:$PATH"
    fi
    
    # Export KS_BASH for compatibility (though 'bash' command now works everywhere)
    export KS_BASH="$ks_bin/bash"
}

# Run tool setup
_setup_ks_tools

# Base directories
export KS_ROOT="${KS_ROOT:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)}"
export KS_KNOWLEDGE_DIR="${KS_KNOWLEDGE_DIR:-$KS_ROOT/knowledge}"
export KS_TOOLS_DIR="${KS_TOOLS_DIR:-$KS_ROOT/tools}"
export KS_EVENTS_DIR="${KS_EVENTS_DIR:-$KS_KNOWLEDGE_DIR/events}"
export KS_DERIVED_DIR="${KS_DERIVED_DIR:-$KS_KNOWLEDGE_DIR/derived}"

# File paths
export KS_HOT_LOG="${KS_HOT_LOG:-$KS_EVENTS_DIR/hot.jsonl}"
export KS_ARCHIVE_DIR="${KS_ARCHIVE_DIR:-$KS_EVENTS_DIR/archive}"
export KS_BACKGROUND_DIR="${KS_BACKGROUND_DIR:-$KS_KNOWLEDGE_DIR/.background}"
export KS_PROCESS_REGISTRY="${KS_PROCESS_REGISTRY:-$KS_BACKGROUND_DIR/processes}"
export KS_ANALYSIS_QUEUE="${KS_ANALYSIS_QUEUE:-$KS_BACKGROUND_DIR/analysis_queue.json}"

# Claude model for analysis tools
export KS_MODEL="${KS_MODEL:-sonnet}"

# Experimental conversations (gitignored)
export KS_EXPERIMENTS_DIR="$KS_ROOT/experiments"

# Logex conversation structure (for active conversation)
export KS_CONVERSATION_CONFIG="logex-config.yaml"
export KS_CONVERSATION_KNOWLEDGE_DIR="knowledge"
export KS_CONVERSATION_EVENTS_DIR="$KS_CONVERSATION_KNOWLEDGE_DIR/events"
export KS_CONVERSATION_HOT_LOG="$KS_CONVERSATION_EVENTS_DIR/hot.jsonl"
export KS_CONVERSATION_ORCHESTRATION_LOG="supervise/orchestration.jsonl"

# Note: Standard tool names (bash, date, find, stat, getopt, flock) now work
# consistently across platforms via the symlinks in $KS_ROOT/bin/
