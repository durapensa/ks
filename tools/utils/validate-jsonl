#!/usr/bin/env bash

# validate-jsonl - Validate JSONL file format

set -euo pipefail

# Source configuration and libraries
source "${0%/*}/../../.ks-env"

# Simple argument parsing (UTILS category)
usage() {
    cat << 'EOF'
Validate JSONL file format

Usage: validate-jsonl [options] FILE

Arguments:
  FILE               Path to JSONL file to validate

Options:
  --help             Show this help

Examples:
  validate-jsonl knowledge/events/2024-03-15.jsonl
  validate-jsonl $KS_HOT_LOG
EOF
}

# Simple argument parsing for utilities
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help)
            usage
            exit 0
            ;;
        --*)
            echo "Unknown option: $1" >&2
            usage
            exit 1
            ;;
        *)
            # First non-option argument is the file
            if [[ -z "${FILE:-}" ]]; then
                FILE="$1"
            else
                echo "Error: Multiple file arguments not supported" >&2
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate file argument
if [[ -z "${FILE:-}" ]]; then
    echo "Error: FILE argument required" >&2
    usage
    exit 1
fi

if [ ! -f "$FILE" ]; then
    echo "Error: File '$FILE' not found" >&2
    exit 1
fi

# Check if file is empty
if [ ! -s "$FILE" ]; then
    echo "✓ File is empty (valid JSONL)" >&2
    exit 0
fi

# Validate each line is valid JSON
ERROR_COUNT=0
LINE_COUNT=0

while IFS= read -r line; do
    LINE_COUNT=$((LINE_COUNT + 1))
    if [ -n "$line" ]; then
        if ! echo "$line" | jq -e . >/dev/null 2>&1; then
            echo "✗ Line $LINE_COUNT: Invalid JSON" >&2
            echo "  $line" | head -c 80 >&2
            echo "..." >&2
            ERROR_COUNT=$((ERROR_COUNT + 1))
        fi
    fi
done < "$FILE"

if [ $ERROR_COUNT -eq 0 ]; then
    echo "✓ All $LINE_COUNT lines are valid JSON (JSONL format verified)" >&2
    
    # Additional validation for knowledge events
    if [[ "$FILE" == *"knowledge/events"* ]]; then
        # Check required fields
        MISSING_FIELDS=0
        while IFS= read -r line; do
            if [ -n "$line" ]; then
                # Check for required fields
                if ! echo "$line" | jq -e 'has("ts") and has("type") and has("topic") and has("content")' >/dev/null 2>&1; then
                    MISSING_FIELDS=$((MISSING_FIELDS + 1))
                fi
            fi
        done < "$FILE"
        
        if [ $MISSING_FIELDS -gt 0 ]; then
            echo "⚠ Warning: $MISSING_FIELDS events missing required fields (ts, type, topic, content)" >&2
        else
            echo "✓ All events have required fields" >&2
        fi
    fi
    exit 0
else
    echo "✗ Found $ERROR_COUNT invalid lines out of $LINE_COUNT total" >&2
    exit 1
fi