#!/usr/bin/env bash
# Rotate knowledge event logs from hot to archive (declarative version)

set -euo pipefail

# Source configuration and libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"
source "$KS_ROOT/lib/argparse.sh"
source "$KS_ROOT/tools/lib/queue.sh"

# Define command description
ks_define_usage "Rotate knowledge event logs from hot to archive.

Rotation creates archive/YYYY-MM-DD-HHMMSS.jsonl files when:
- File size exceeds limit
- Oldest event exceeds age limit
- Event count exceeds limit

Example:
  ${0##*/} --max-size 10485760   # Rotate when file exceeds 10MB"

# Check for background analysis results
ks_check_background_results || true

# Default rotation thresholds
DEFAULT_MAX_SIZE=5242880     # 5MB default
DEFAULT_MAX_AGE=168          # 7 days default (in hours)
DEFAULT_MAX_EVENTS=1000      # 1000 events default

# Initialize and define options
ks_init_options
ks_example "--max-size 10485760"
ks_example "--force"
ks_option "force" "f" "Force rotation regardless of thresholds" "" "" "flag"
ks_option "max-size" "s" "Rotate when file exceeds size in bytes" "$DEFAULT_MAX_SIZE" ""
ks_option "max-age" "a" "Rotate when oldest event exceeds age in hours" "$DEFAULT_MAX_AGE" ""
ks_option "max-events" "e" "Rotate when event count exceeds limit" "$DEFAULT_MAX_EVENTS" ""

# Process options
ks_process_options "$@"

# Ensure directories exist
ks_ensure_dirs

# Check if hot log exists and has content
if [[ ! -f "$KS_HOT_LOG" ]] || [[ ! -s "$KS_HOT_LOG" ]]; then
    echo "No events to rotate (hot log is empty or missing)"
    exit 0
fi

# Validate JSONL format before rotation
echo "Validating JSONL format..."
if ! "$KS_TOOLS_DIR/utils/validate-jsonl" "$KS_HOT_LOG" >/dev/null 2>&1; then
    ks_error "Hot log has invalid JSONL format. Please fix before rotating."
    echo "Run: tools/utils/validate-jsonl $KS_HOT_LOG" >&2
    exit 1
fi

# Function to check if rotation is needed
should_rotate() {
    if [[ "${FORCE:-}" == "true" ]]; then
        echo "Force rotation requested"
        return 0
    fi
    
    # Check file size
    local file_size=$($KS_STAT -c%s "$KS_HOT_LOG" 2>/dev/null || echo 0)
    if [[ "$file_size" -gt "${MAX_SIZE:-$DEFAULT_MAX_SIZE}" ]]; then
        echo "File size ($file_size bytes) exceeds limit (${MAX_SIZE:-$DEFAULT_MAX_SIZE} bytes)"
        return 0
    fi
    
    # Check event count
    local event_count=$(wc -l < "$KS_HOT_LOG" | tr -d ' ')
    if [[ "$event_count" -gt "${MAX_EVENTS:-$DEFAULT_MAX_EVENTS}" ]]; then
        echo "Event count ($event_count) exceeds limit (${MAX_EVENTS:-$DEFAULT_MAX_EVENTS})"
        return 0
    fi
    
    # Check age of oldest event
    local first_timestamp=$(head -1 "$KS_HOT_LOG" | jq -r '.ts' 2>/dev/null || echo "")
    if [[ -n "$first_timestamp" ]]; then
        # setup.sh ensures GNU date is available as 'date' on all platforms
        local first_epoch=$($KS_DATE -d "$first_timestamp" +%s 2>/dev/null || echo 0)
        local current_epoch=$EPOCHSECONDS
        local age_hours=$(( (current_epoch - first_epoch) / 3600 ))
        
        if [[ "$age_hours" -gt "${MAX_AGE:-$DEFAULT_MAX_AGE}" ]]; then
            echo "Oldest event age (${age_hours}h) exceeds limit (${MAX_AGE:-$DEFAULT_MAX_AGE}h)"
            return 0
        fi
    fi
    
    return 1
}

# Lock file to prevent concurrent rotations
LOCK_FILE="${KS_HOT_LOG}.lock"
exec 200>"$LOCK_FILE"

if ! $KS_FLOCK -n 200; then
    echo "Another rotation is in progress"
    exit 1
fi

# Check if rotation is needed
if ! should_rotate; then
    echo "No rotation needed"
    rm -f "$LOCK_FILE"
    exit 0
fi

# Generate archive filename with "cold-" prefix to match test expectations
ARCHIVE_FILE="${KS_ARCHIVE_DIR}/cold-$($KS_DATE +%Y-%m-%d-%H%M%S).jsonl"

# Perform rotation
echo "Rotating $KS_HOT_LOG to $ARCHIVE_FILE"

# Move hot log to archive (atomic operation)
mv "$KS_HOT_LOG" "$ARCHIVE_FILE"

# Create new empty hot log
touch "$KS_HOT_LOG"

# Set proper permissions
chmod 644 "$KS_HOT_LOG"

# Get event count from archive
EVENT_COUNT=$(wc -l < "$ARCHIVE_FILE" | tr -d ' ')

echo "Rotation complete: $EVENT_COUNT events archived"

# Cleanup lock file
rm -f "$LOCK_FILE"