#!/bin/bash
# Archive and cleanup processed background analysis notifications

set -euo pipefail

# Source environment
source "$(dirname "$0")/../../.ks-env"

# Configuration
ARCHIVE_DAYS="${KS_NOTIFICATION_ARCHIVE_DAYS:-30}"  # Keep archived for 30 days
STALE_DAYS="${KS_NOTIFICATION_STALE_DAYS:-7}"       # Consider stale after 7 days

# Usage information
usage() {
    cat << EOF
Usage: $(basename "$0") [options]

Archive and cleanup processed background analysis notifications.

Options:
  --archive     Archive notifications older than $STALE_DAYS days
  --purge       Remove archived notifications older than $ARCHIVE_DAYS days  
  --dry-run     Show what would be done without making changes
  --force       Skip confirmation prompts
  --help        Show this help message

Default behavior:
  - Archives notifications older than $STALE_DAYS days
  - Removes archived notifications older than $ARCHIVE_DAYS days
  - Asks for confirmation before making changes

Examples:
  $(basename "$0")                    # Archive stale, remove old
  $(basename "$0") --dry-run          # Show what would happen
  $(basename "$0") --force --archive  # Archive without confirmation
EOF
}

# Parse arguments
ARCHIVE_ONLY=false
PURGE_ONLY=false
DRY_RUN=false
FORCE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --archive)
            ARCHIVE_ONLY=true
            shift
            ;;
        --purge)
            PURGE_ONLY=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --force)
            FORCE=true
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1" >&2
            usage >&2
            exit 1
            ;;
    esac
done

# Setup archive directory
ARCHIVE_DIR="$KS_NOTIFICATIONS_DIR/.archive"
mkdir -p "$ARCHIVE_DIR"

# Archive stale notifications
archive_stale() {
    echo "Archiving notifications older than $STALE_DAYS days..."
    
    # Find stale notifications
    local stale_notifications=$(find "$KS_NOTIFICATIONS_DIR" -maxdepth 1 -name "*.md" -mtime +$STALE_DAYS 2>/dev/null || true)
    
    if [ -z "$stale_notifications" ]; then
        echo "No stale notifications found."
        return 0
    fi
    
    local count=0
    for notification in $stale_notifications; do
        if [ -f "$notification" ]; then
            local filename=$(basename "$notification")
            local archive_path="$ARCHIVE_DIR/$filename"
            
            if [ "$DRY_RUN" = true ]; then
                echo "Would archive: $filename"
            else
                mv "$notification" "$archive_path"
                echo "Archived: $filename"
            fi
            count=$((count + 1))
        fi
    done
    
    echo "Archived $count notifications."
}

# Purge old archived notifications
purge_old() {
    echo "Removing archived notifications older than $ARCHIVE_DAYS days..."
    
    # Find old archived notifications
    local old_notifications=$(find "$ARCHIVE_DIR" -name "*.md" -mtime +$ARCHIVE_DAYS 2>/dev/null || true)
    
    if [ -z "$old_notifications" ]; then
        echo "No old archived notifications found."
        return 0
    fi
    
    local count=0
    for notification in $old_notifications; do
        if [ -f "$notification" ]; then
            local filename=$(basename "$notification")
            
            if [ "$DRY_RUN" = true ]; then
                echo "Would remove: $filename"
            else
                rm "$notification"
                echo "Removed: $filename"
            fi
            count=$((count + 1))
        fi
    done
    
    echo "Removed $count old notifications."
}

# Confirmation prompt
confirm_action() {
    local message="$1"
    
    if [ "$FORCE" = true ] || [ "$DRY_RUN" = true ]; then
        return 0
    fi
    
    echo -n "$message (y/N): "
    read -r response
    case "$response" in
        [yY]|[yY][eE][sS])
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Main execution
if [ ! -d "$KS_NOTIFICATIONS_DIR" ]; then
    echo "No notifications directory found."
    exit 1
fi

if [ "$DRY_RUN" = true ]; then
    echo "=== DRY RUN MODE - No changes will be made ==="
fi

# Execute requested operations
if [ "$PURGE_ONLY" = true ]; then
    if confirm_action "Remove old archived notifications?"; then
        purge_old
    fi
elif [ "$ARCHIVE_ONLY" = true ]; then
    if confirm_action "Archive stale notifications?"; then
        archive_stale
    fi
else
    # Default: archive stale and purge old
    if confirm_action "Archive stale notifications and remove old archived ones?"; then
        archive_stale
        echo ""
        purge_old
    fi
fi

if [ "$DRY_RUN" = true ]; then
    echo "=== DRY RUN COMPLETE ==="
fi