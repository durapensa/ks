#!/bin/bash
# Check event count triggers and spawn background analyses
# Called automatically after event capture

set -euo pipefail

# Source environment
source "$(dirname "$0")/../../.ks-env"

# Configuration
EVENT_THRESHOLD_THEMES="${KS_EVENT_THRESHOLD_THEMES:-10}"
EVENT_THRESHOLD_CONNECTIONS="${KS_EVENT_THRESHOLD_CONNECTIONS:-20}"
EVENT_THRESHOLD_PATTERNS="${KS_EVENT_THRESHOLD_PATTERNS:-30}"
LAST_COUNT_FILE="$KS_BACKGROUND_DIR/.event_trigger_state"

# Silent mode for automatic calls
SILENT_MODE="${1:-silent}"

# Initialize state file
init_state() {
    if [ ! -f "$LAST_COUNT_FILE" ]; then
        cat > "$LAST_COUNT_FILE" << EOF
{
  "last_count": 0,
  "last_theme_trigger": 0,
  "last_connection_trigger": 0,
  "last_pattern_trigger": 0,
  "last_check": "$(ks_timestamp)"
}
EOF
    fi
}

# Load state
load_state() {
    init_state
    LAST_COUNT=$(jq -r '.last_count // 0' "$LAST_COUNT_FILE")
    LAST_THEME_TRIGGER=$(jq -r '.last_theme_trigger // 0' "$LAST_COUNT_FILE")
    LAST_CONNECTION_TRIGGER=$(jq -r '.last_connection_trigger // 0' "$LAST_COUNT_FILE")
    LAST_PATTERN_TRIGGER=$(jq -r '.last_pattern_trigger // 0' "$LAST_COUNT_FILE")
}

# Save state
save_state() {
    local temp_file=$(mktemp)
    jq --arg count "$CURRENT_COUNT" \
       --arg theme "$LAST_THEME_TRIGGER" \
       --arg conn "$LAST_CONNECTION_TRIGGER" \
       --arg pattern "$LAST_PATTERN_TRIGGER" \
       --arg time "$(ks_timestamp)" \
       '{
         last_count: ($count | tonumber),
         last_theme_trigger: ($theme | tonumber),
         last_connection_trigger: ($conn | tonumber), 
         last_pattern_trigger: ($pattern | tonumber),
         last_check: $time
       }' <<< '{}' > "$temp_file"
    
    mv "$temp_file" "$LAST_COUNT_FILE"
}

# Notify user if not in silent mode
notify() {
    if [ "$SILENT_MODE" != "silent" ]; then
        echo "$@"
    fi
}

# Spawn theme analysis
spawn_theme_analysis() {
    local findings_file="$KS_BACKGROUND_DIR/findings/themes-$(date +%Y%m%d-%H%M%S).json"
    mkdir -p "$(dirname "$findings_file")"
    
    notify "üîÑ Spawning theme analysis..."
    
    (
        # Run analysis with JSON output, wrapping in findings array
        local tool_path="$(dirname "$0")/../analyze/extract-themes"
        local raw_output=$("$tool_path" --days 3 --format json 2>/dev/null)
        
        if [ -n "$raw_output" ]; then
            # Wrap the themes in a findings structure
            echo "$raw_output" | jq '{findings: .themes}' > "$findings_file"
            
            if [ -s "$findings_file" ]; then
                # Add to queue
                ks_queue_add_pending "theme-analysis" "$findings_file"
                
                # Create notification file for backwards compatibility
                local notification="$KS_NOTIFICATIONS_DIR/theme-analysis-ready.txt"
                echo "Theme analysis complete. Run 'tools/analyze/review-findings' to review." > "$notification"
            else
                rm -f "$findings_file"
            fi
        else
            rm -f "$findings_file"
        fi
    ) &
    
    LAST_THEME_TRIGGER=$CURRENT_COUNT
}

# Spawn connection analysis  
spawn_connection_analysis() {
    local findings_file="$KS_BACKGROUND_DIR/findings/connections-$(date +%Y%m%d-%H%M%S).json"
    mkdir -p "$(dirname "$findings_file")"
    
    notify "üîÑ Spawning connection analysis..."
    
    (
        # Run analysis with JSON output, wrapping in findings array
        local tool_path="$(dirname "$0")/../analyze/find-connections"
        local raw_output=$("$tool_path" --days 7 --format json 2>/dev/null)
        
        if [ -n "$raw_output" ]; then
            # Wrap the connections in a findings structure
            echo "$raw_output" | jq '{findings: .connections}' > "$findings_file"
            
            if [ -s "$findings_file" ]; then
                # Add to queue
                ks_queue_add_pending "connection-analysis" "$findings_file"
                
                # Create notification
                local notification="$KS_NOTIFICATIONS_DIR/connection-analysis-ready.txt"
                echo "Connection analysis complete. Run 'tools/analyze/review-findings' to review." > "$notification"
            else
                rm -f "$findings_file"
            fi
        else
            rm -f "$findings_file"
        fi
    ) &
    
    LAST_CONNECTION_TRIGGER=$CURRENT_COUNT
}

# Spawn pattern analysis
spawn_pattern_analysis() {
    local findings_file="$KS_BACKGROUND_DIR/findings/patterns-$(date +%Y%m%d-%H%M%S).json"
    mkdir -p "$(dirname "$findings_file")"
    
    notify "üîÑ Spawning pattern analysis..."
    
    (
        # Run analysis with JSON output, wrapping in findings array
        ks_collect_files
        
        if [ ${#FILES_TO_PROCESS[@]} -gt 0 ]; then
            local tool_path="$(dirname "$0")/../analyze/identify-recurring-thought-patterns"
            local raw_output=$(cat "${FILES_TO_PROCESS[@]}" | "$tool_path" --days 14 --format json 2>/dev/null)
            
            if [ -n "$raw_output" ]; then
                # Wrap patterns in a findings structure (handle both themes and direct array)
                echo "$raw_output" | jq '{findings: (if .themes then .themes else . end)}' > "$findings_file"
                
                if [ -s "$findings_file" ]; then
                    # Add to queue
                    ks_queue_add_pending "pattern-analysis" "$findings_file"
                    
                    # Create notification
                    local notification="$KS_NOTIFICATIONS_DIR/pattern-analysis-ready.txt"
                    echo "Pattern analysis complete. Run 'tools/analyze/review-findings' to review." > "$notification"
                else
                    rm -f "$findings_file"
                fi
            fi
        fi
    ) &
    
    LAST_PATTERN_TRIGGER=$CURRENT_COUNT
}

# Main check logic
main() {
    # Load current state
    load_state
    
    # Get current event count
    CURRENT_COUNT=$(ks_count_new_events)
    
    # No new events since last check
    if [ "$CURRENT_COUNT" -le "$LAST_COUNT" ]; then
        return 0
    fi
    
    # Check if any analyses are pending review
    local pending=$(ks_queue_list_pending)
    if [ "$pending" != "[]" ] && [ "$SILENT_MODE" = "verbose" ]; then
        notify "‚ö†Ô∏è  Analyses pending review. Run 'tools/analyze/review-findings' in another terminal."
        save_state
        return 0
    fi
    
    # Calculate events since last triggers
    local events_since_theme=$((CURRENT_COUNT - LAST_THEME_TRIGGER))
    local events_since_connection=$((CURRENT_COUNT - LAST_CONNECTION_TRIGGER))
    local events_since_pattern=$((CURRENT_COUNT - LAST_PATTERN_TRIGGER))
    
    # Check theme trigger
    if [ "$events_since_theme" -ge "$EVENT_THRESHOLD_THEMES" ]; then
        if ks_queue_check "theme-analysis"; then
            spawn_theme_analysis
        fi
    fi
    
    # Check connection trigger
    if [ "$events_since_connection" -ge "$EVENT_THRESHOLD_CONNECTIONS" ]; then
        if ks_queue_check "connection-analysis"; then
            spawn_connection_analysis
        fi
    fi
    
    # Check pattern trigger
    if [ "$events_since_pattern" -ge "$EVENT_THRESHOLD_PATTERNS" ]; then
        if ks_queue_check "pattern-analysis"; then
            spawn_pattern_analysis
        fi
    fi
    
    # Save updated state
    save_state
}

# Run main check
main