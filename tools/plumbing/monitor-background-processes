#!/usr/bin/env bash
# Monitor and manage background analysis processes (declarative version)

set -euo pipefail

# Source environment and libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"
source "$KS_ROOT/lib/argparse.sh"
source "$KS_ROOT/tools/lib/queue.sh"
source "$KS_ROOT/tools/lib/process.sh"

# Define command description
ks_define_usage "Monitor and manage background analysis processes.

Examples:
  ${0##*/}                    # Show all process status
  ${0##*/} --active           # Show running processes
  ${0##*/} --cleanup          # Clean stale entries
  ${0##*/} --archive-old 30   # Archive entries older than 30 days
  ${0##*/} --kill-stale       # Kill hanging processes"

# Check for background analysis results
ks_check_background_results || true

# Initialize and define options
ks_init_options
ks_example "--status"
ks_example "--kill-stale"

# Action flags (mutually exclusive)
ks_option "status" "" "Show current process status (default)" "" "" "flag"
ks_option "active" "" "List only active processes" "" "" "flag"
ks_option "completed" "" "List only completed processes" "" "" "flag"
ks_option "failed" "" "List only failed processes" "" "" "flag"
ks_option "cleanup" "" "Clean up stale process entries" "" "" "flag"
ks_option "kill-stale" "" "Kill stale active processes" "" "" "flag"
ks_option "history" "" "Show process history" "" "" "flag"

# Options with arguments
ks_option "archive-old" "" "Archive process records older than N days" "" ""

# Modifier flags
ks_option "dry-run" "" "Show what would be done without changes" "" "" "flag"

# Process options
ks_process_options "$@"

# Show process status
show_status() {
    echo "=== Background Process Status ==="
    echo ""
    
    # Check lock status
    local lock_file="$KS_BACKGROUND_DIR/background.lock"
    if [[ -f "$lock_file" ]]; then
        local lock_info=$(cat "$lock_file")
        echo "Background lock: HELD ($lock_info)"
    else
        echo "Background lock: FREE"
    fi
    echo ""
    
    # Count processes by status
    local active_count=$(find "$KS_PROCESS_REGISTRY/active" -name "*.json" 2>/dev/null | wc -l || echo 0)
    local completed_count=$(find "$KS_PROCESS_REGISTRY/completed" -name "*.json" 2>/dev/null | wc -l || echo 0)
    local failed_count=$(find "$KS_PROCESS_REGISTRY/failed" -name "*.json" 2>/dev/null | wc -l || echo 0)
    
    echo "Process counts:"
    echo "  Active: $active_count"
    echo "  Completed: $completed_count"
    echo "  Failed: $failed_count"
    echo ""
    
    # Show active processes
    if [[ "$active_count" -gt 0 ]]; then
        echo "Active processes:"
        for process_file in "$KS_PROCESS_REGISTRY/active"/*.json; do
            if [[ -f "$process_file" ]]; then
                local task=$(jq -r '.task' "$process_file")
                local pid=$(jq -r '.pid' "$process_file")
                local start_time=$(jq -r '.start_time' "$process_file")
                local description=$(jq -r '.description // ""' "$process_file")
                
                # Check if process is still running
                if kill -0 "$pid" 2>/dev/null; then
                    echo "  ✓ $task (PID: $pid) - $start_time"
                    if [[ -n "$description" ]]; then
                        echo "    $description"
                    fi
                else
                    echo "  ✗ $task (PID: $pid) - $start_time [STALE - process not running]"
                fi
            fi
        done
        echo ""
    fi
    
    # Show recent completed processes
    if [[ "$completed_count" -gt 0 ]]; then
        echo "Recent completed processes:"
        find "$KS_PROCESS_REGISTRY/completed" -name "*.json" -mtime -1 | head -5 | while read -r process_file; do
            if [[ -f "$process_file" ]]; then
                local task=$(jq -r '.task' "$process_file")
                local start_time=$(jq -r '.start_time' "$process_file")
                local end_time=$(jq -r '.end_time' "$process_file")
                echo "  ✓ $task - $start_time → $end_time"
            fi
        done
        echo ""
    fi
    
    # Show recent failed processes
    if [[ "$failed_count" -gt 0 ]]; then
        echo "Recent failed processes:"
        find "$KS_PROCESS_REGISTRY/failed" -name "*.json" -mtime -1 | head -5 | while read -r process_file; do
            if [[ -f "$process_file" ]]; then
                local task=$(jq -r '.task' "$process_file")
                local start_time=$(jq -r '.start_time' "$process_file")
                echo "  ✗ $task - $start_time [FAILED]"
            fi
        done
        echo ""
    fi
}

# List processes by status
list_processes() {
    local status_dir="$1"
    local status_name="$2"
    
    echo "=== $status_name Processes ==="
    echo ""
    
    local process_count=$(find "$KS_PROCESS_REGISTRY/$status_dir" -name "*.json" 2>/dev/null | wc -l || echo 0)
    
    if [[ "$process_count" -eq 0 ]]; then
        echo "No $status_name processes found."
        return
    fi
    
    for process_file in "$KS_PROCESS_REGISTRY/$status_dir"/*.json; do
        if [[ -f "$process_file" ]]; then
            local task=$(jq -r '.task' "$process_file")
            local pid=$(jq -r '.pid' "$process_file")
            local start_time=$(jq -r '.start_time' "$process_file")
            local end_time=$(jq -r '.end_time // "running"' "$process_file")
            local description=$(jq -r '.description // ""' "$process_file")
            
            echo "Task: $task"
            echo "  PID: $pid"
            echo "  Started: $start_time"
            if [[ "$end_time" != "running" ]]; then
                echo "  Ended: $end_time"
            fi
            if [[ -n "$description" ]]; then
                echo "  Description: $description"
            fi
            
            # For active processes, check if still running
            if [[ "$status_dir" == "active" ]]; then
                if kill -0 "$pid" 2>/dev/null; then
                    echo "  Status: RUNNING"
                else
                    echo "  Status: STALE (process not found)"
                fi
            fi
            echo ""
        fi
    done
}

# Clean up stale processes
cleanup_stale() {
    echo "Cleaning up stale process entries..."
    ks_cleanup_stale_processes
    echo "Cleanup completed."
}

# Archive old process records
archive_old_processes() {
    local days="${1:-30}"
    local dry_run="${2:-false}"
    
    echo "Archiving process records older than $days days..."
    
    local archive_dir="$KS_BACKGROUND_DIR/processes/archive/$(date +%Y%m)"
    local archived_count=0
    
    if [[ "$dry_run" == "false" ]]; then
        mkdir -p "$archive_dir"
    fi
    
    # Archive completed processes
    find "$KS_PROCESS_REGISTRY/completed" -name "*.json" -mtime +$days 2>/dev/null | while read -r process_file; do
        if [[ -f "$process_file" ]]; then
            local filename=$(basename "$process_file")
            if [[ "$dry_run" == "true" ]]; then
                echo "Would archive: completed/$filename"
            else
                mv "$process_file" "$archive_dir/"
                echo "Archived: completed/$filename"
            fi
            archived_count=$((archived_count + 1))
        fi
    done
    
    # Archive failed processes
    find "$KS_PROCESS_REGISTRY/failed" -name "*.json" -mtime +$days 2>/dev/null | while read -r process_file; do
        if [[ -f "$process_file" ]]; then
            local filename=$(basename "$process_file")
            if [[ "$dry_run" == "true" ]]; then
                echo "Would archive: failed/$filename"
            else
                mv "$process_file" "$archive_dir/"
                echo "Archived: failed/$filename"
            fi
            archived_count=$((archived_count + 1))
        fi
    done
    
    # Also clean up old reviewed findings
    local findings_archive="$KS_BACKGROUND_DIR/reviewed"
    if [[ -d "$findings_archive" ]]; then
        find "$findings_archive" -name "*.json" -mtime +$days 2>/dev/null | while read -r findings_file; do
            if [[ -f "$findings_file" ]]; then
                if [[ "$dry_run" == "true" ]]; then
                    echo "Would remove old findings: $(basename "$findings_file")"
                else
                    rm -f "$findings_file"
                    echo "Removed old findings: $(basename "$findings_file")"
                fi
            fi
        done
    fi
    
    if [[ "$archived_count" -eq 0 ]]; then
        echo "No old process records found."
    else
        if [[ "$dry_run" == "true" ]]; then
            echo "Would archive $archived_count process records."
        else
            echo "Archived $archived_count process records to $archive_dir"
        fi
    fi
}

# Kill stale active processes
kill_stale_processes() {
    echo "Checking for stale active processes to terminate..."
    
    local killed_count=0
    
    for process_file in "$KS_PROCESS_REGISTRY/active"/*.json; do
        if [[ -f "$process_file" ]]; then
            local pid=$(jq -r '.pid' "$process_file")
            local task=$(jq -r '.task' "$process_file")
            local start_epoch=$(jq -r '.start_epoch // 0' "$process_file")
            local current_time=$EPOCHSECONDS
            local age=$((current_time - start_epoch))
            
            # Kill processes older than 30 minutes
            if [[ "$age" -gt 1800 ]]; then
                if kill -0 "$pid" 2>/dev/null; then
                    echo "Killing stale process: $task (PID: $pid, age: ${age}s)"
                    kill -TERM "$pid" 2>/dev/null || true
                    sleep 2
                    if kill -0 "$pid" 2>/dev/null; then
                        kill -KILL "$pid" 2>/dev/null || true
                    fi
                    killed_count=$((killed_count + 1))
                fi
            fi
        fi
    done
    
    if [[ "$killed_count" -eq 0 ]]; then
        echo "No stale processes found to kill."
    else
        echo "Killed $killed_count stale processes."
        # Run cleanup to move them to failed
        ks_cleanup_stale_processes
    fi
}

# Show process history
show_history() {
    echo "=== Background Process History ==="
    echo ""
    
    # Combine all process files with timestamps
    local temp_file=$(mktemp)
    
    # Add completed processes
    for process_file in "$KS_PROCESS_REGISTRY/completed"/*.json; do
        if [[ -f "$process_file" ]]; then
            local end_epoch=$(jq -r '.end_epoch // 0' "$process_file")
            echo "$end_epoch:completed:$process_file" >> "$temp_file"
        fi
    done
    
    # Add failed processes
    for process_file in "$KS_PROCESS_REGISTRY/failed"/*.json; do
        if [[ -f "$process_file" ]]; then
            local end_epoch=$(jq -r '.end_epoch // 0' "$process_file")
            echo "$end_epoch:failed:$process_file" >> "$temp_file"
        fi
    done
    
    # Sort by timestamp and show recent 20
    if [[ -s "$temp_file" ]]; then
        sort -rn "$temp_file" | head -20 | while IFS=':' read -r timestamp status filepath; do
            local task=$(jq -r '.task' "$filepath")
            local start_time=$(jq -r '.start_time' "$filepath")
            local end_time=$(jq -r '.end_time' "$filepath")
            
            case "$status" in
                completed)
                    echo "✓ $task - $start_time → $end_time"
                    ;;
                failed)
                    echo "✗ $task - $start_time → $end_time [FAILED]"
                    ;;
            esac
        done
    else
        echo "No process history found."
    fi
    
    rm -f "$temp_file"
}

# Determine action from flags
ACTION=""
if [[ "${ACTIVE:-}" == "true" ]]; then
    ACTION="active"
elif [[ "${COMPLETED:-}" == "true" ]]; then
    ACTION="completed"
elif [[ "${FAILED:-}" == "true" ]]; then
    ACTION="failed"
elif [[ "${CLEANUP:-}" == "true" ]]; then
    ACTION="cleanup"
elif [[ "${KILL_STALE:-}" == "true" ]]; then
    ACTION="kill-stale"
elif [[ "${HISTORY:-}" == "true" ]]; then
    ACTION="history"
elif [[ -n "${ARCHIVE_OLD:-}" ]]; then
    ACTION="archive-old"
else
    ACTION="status"  # Default
fi

# Execute action
case "$ACTION" in
    status)
        show_status
        ;;
    active)
        list_processes "active" "Active"
        ;;
    completed)
        list_processes "completed" "Completed"
        ;;
    failed)
        list_processes "failed" "Failed"
        ;;
    cleanup)
        cleanup_stale
        ;;
    archive-old)
        archive_old_processes "${ARCHIVE_OLD}" "${DRY_RUN:-false}"
        ;;
    kill-stale)
        kill_stale_processes
        ;;
    history)
        show_history
        ;;
esac