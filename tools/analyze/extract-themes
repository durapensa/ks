#!/usr/bin/env bash

# extract-themes - Extract key themes from knowledge events (declarative version)

set -euo pipefail

# Source configuration and modular libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"
source "$KS_ROOT/lib/files.sh"
source "$KS_ROOT/lib/time.sh"
source "$KS_ROOT/lib/argparse.sh"
source "$KS_ROOT/tools/lib/queue.sh"
source "$KS_ROOT/tools/lib/claude.sh"

# Define command description
ks_define_usage "Extract key themes from knowledge events using AI analysis"

# Check for background analysis results
ks_check_background_results || true

# Initialize and define options
ks_init_options
ks_example "--days 7"
ks_example "--since 2024-03-01 --format json"
ks_option "days" "d" "Analyze events from last N days" "7" "ks_handle_days"
ks_option "since" "s" "Analyze events since ISO date (overrides --days)" "" "ks_handle_since"
ks_option "type" "t" "Filter by event type" "" ""
ks_option "format" "f" "Output format: text, json, markdown" "text" "ks_handle_format"

# Process options - this sets DAYS, SINCE, TYPE, FORMAT variables
ks_process_options "$@"

# Extract events and analyze
CONTENT=$(ks_extract_events "$DAYS" "$SINCE" "$(ks_build_filter "$TYPE" "")")

[[ -z "$CONTENT" ]] && { echo "No events found in the last $DAYS days"; exit 0; }

# Prepare AI prompt
PROMPT="Analyze the following knowledge events from the last $DAYS days and extract the most important themes.

$CONTENT

Identify 3-5 key themes from the events. Return ONLY valid JSON in this format:
{
  \"themes\": [
    {
      \"name\": \"Theme Name\",
      \"description\": \"Brief description\",
      \"frequency\": 5,
      \"supporting_quotes\": [\"quote1\", \"quote2\"]
    }
  ]
}

If no meaningful themes can be extracted, return: {\"themes\": []}"

# Analyze with Claude
ANALYSIS=$(ks_claude_analyze "$PROMPT" || echo "Error: Analysis failed")

# Output based on format
ks_format_analysis "$ANALYSIS" "$FORMAT" "Theme Analysis"