#!/usr/bin/env bash

# identify-recurring-thought-patterns - Identify recurring patterns in thought events (declarative version)

set -euo pipefail

# Source configuration and modular libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"
source "$KS_ROOT/lib/files.sh"
source "$KS_ROOT/lib/time.sh"
source "$KS_ROOT/lib/validation.sh"
source "$KS_ROOT/lib/error.sh"
source "$KS_ROOT/lib/usage.sh"
source "$KS_ROOT/lib/argparse.sh"
source "$KS_ROOT/tools/lib/queue.sh"
source "$KS_ROOT/tools/lib/claude.sh"
source "$KS_ROOT/tools/lib/analysis.sh"

# Check for background analysis results
ks_check_background_results || true

# Standardized usage function
usage() {
    declare -a arguments=()
    declare -a examples=(
        "identify-recurring-thought-patterns --days 30"
        "identify-recurring-thought-patterns --since 2024-01-01 --format markdown"
    )
    ks_generate_usage \
        "Identify recurring patterns in thought events using AI analysis" \
        "identify-recurring-thought-patterns" \
        "[options]" \
        "ANALYZE" \
        arguments \
        examples
}

# Parse arguments using the new library
ks_parse_category_args "ANALYZE" -- "$@"

# Validate options
ks_validate_analyze_options "$DAYS" "$SINCE" "$TYPE" "$FORMAT" "$VERBOSE"

# Extract only thought events
CONTENT=$(ks_extract_events "$DAYS" "$SINCE" ".type == \"thought\"")

[[ -z "$CONTENT" ]] && { echo "No thought events found in the last $DAYS days"; exit 0; }

# Prepare AI prompt
PROMPT="Analyze the following thought events from the last $DAYS days and identify recurring patterns.

$CONTENT

Look for:
1. Topics or themes that appear repeatedly
2. Patterns in how thoughts develop or evolve
3. Common triggers or contexts
4. Recurring questions or concerns

Return ONLY valid JSON in this format:
{
  \"patterns\": [
    {
      \"pattern\": \"Pattern description\",
      \"frequency\": \"How often it appears\",
      \"examples\": [\"example1\", \"example2\"],
      \"significance\": \"Why this pattern matters\"
    }
  ]
}

If no patterns are found, return: {\"patterns\": []}"

# Analyze with Claude
ANALYSIS=$(ks_claude_analyze "$PROMPT" || echo "Error: Analysis failed")

# Output based on format
ks_format_analysis "$ANALYSIS" "$FORMAT" "Thought Pattern Analysis"