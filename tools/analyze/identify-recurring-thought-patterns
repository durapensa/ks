#!/usr/bin/env bash

# identify-recurring-thought-patterns - Identify recurring patterns in thought events (declarative version)

set -euo pipefail

# Source configuration and modular libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"
source "$KS_ROOT/lib/files.sh"
source "$KS_ROOT/lib/time.sh"
source "$KS_ROOT/lib/validation.sh"
source "$KS_ROOT/tools/lib/queue.sh"
source "$KS_ROOT/tools/lib/claude.sh"
source "$KS_ROOT/tools/lib/analysis.sh"

# Check for background analysis results
ks_check_background_results || true

# Generated argument parsing (ANALYZE category)
usage() {
    cat << 'EOF'
Identify recurring patterns in thought events using AI analysis

Usage: identify-recurring-thought-patterns [options]

Options:
  --help              Show this help
  --days DAYS        Analyze events from last N days (default: 30)
  --since SINCE      Analyze events since ISO date
  --type TYPE        Filter by event type
  --format FORMAT    Output format (default: text)
  --verbose          Show detailed output

Examples:
  identify-recurring-thought-patterns --days 30
  identify-recurring-thought-patterns --since 2024-01-01 --format markdown
EOF
}

# Build getopt options
LONG_OPTS="help"
LONG_OPTS="${LONG_OPTS},days:"
LONG_OPTS="${LONG_OPTS},since:"
LONG_OPTS="${LONG_OPTS},type:"
LONG_OPTS="${LONG_OPTS},format:"
LONG_OPTS="${LONG_OPTS},verbose"

# Parse options with getopt (dummy -o h required for long options)
OPTS=$($KS_GETOPT -o h -l "$LONG_OPTS" -- "$@") || { usage; exit 1; }
eval set -- "$OPTS"

# Process options
while true; do
    case "$1" in
        --help) usage; exit 0 ;;
        --days) DAYS="$2"; shift 2 ;;
        --since) SINCE="$2"; shift 2 ;;
        --type) TYPE="$2"; shift 2 ;;
        --format) FORMAT="$2"; shift 2 ;;
        --verbose) VERBOSE=true; shift ;;
        --) shift; break ;;
        *) echo "Internal error" >&2; exit 1 ;;
    esac
done

# Apply defaults and initialize variables
DAYS="${DAYS:-30}"
FORMAT="${FORMAT:-text}"
SINCE="${SINCE:-}"
TYPE="${TYPE:-}"
VERBOSE="${VERBOSE:-}"

# Validate options
ks_validate_analyze_options "$DAYS" "$SINCE" "$TYPE" "$FORMAT" "$VERBOSE"

# Extract only thought events
CONTENT=$(ks_extract_events "$DAYS" "$SINCE" ".type == \"thought\"")

[[ -z "$CONTENT" ]] && { echo "No thought events found in the last $DAYS days"; exit 0; }

# Prepare AI prompt
PROMPT="Analyze the following thought events from the last $DAYS days and identify recurring patterns.

$CONTENT

Look for:
1. Topics or themes that appear repeatedly
2. Patterns in how thoughts develop or evolve
3. Common triggers or contexts
4. Recurring questions or concerns

Return ONLY valid JSON in this format:
{
  \"patterns\": [
    {
      \"pattern\": \"Pattern description\",
      \"frequency\": \"How often it appears\",
      \"examples\": [\"example1\", \"example2\"],
      \"significance\": \"Why this pattern matters\"
    }
  ]
}

If no patterns are found, return: {\"patterns\": []}"

# Analyze with Claude
ANALYSIS=$(ks_claude_analyze "$PROMPT" || echo "Error: Analysis failed")

# Output based on format
ks_format_analysis "$ANALYSIS" "$FORMAT" "Thought Pattern Analysis"