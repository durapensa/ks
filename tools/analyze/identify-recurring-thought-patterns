#!/usr/bin/env bash
# identify-recurring-thought-patterns - Extract recurring themes from knowledge entries
# Pure analysis function: accepts input, returns themed analysis

set -euo pipefail

# Source environment and modular libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"
source "$KS_ROOT/lib/time.sh"
source "$KS_ROOT/lib/argparse.sh"
source "$KS_ROOT/tools/lib/claude.sh"

# Default configuration
DAYS="3"
SINCE=""
FORMAT="text"
RAW_INPUT=false

# Usage
usage() {
    cat << EOF
Usage: ${0##*/} [options] < input

Identify recurring thought patterns and themes from knowledge entries.
Reads event content from stdin, outputs analysis to stdout.

Options:
  --days N          Filter to last N days (default: 3)
  --since DATE      Filter since ISO date (overrides --days)
  --raw             Input is already filtered content (skip date filtering)
  --format FORMAT   Output format: text, json (default: text)
  -h, --help        Show this help message

Input format:
  - JSONL events (default) - will extract .content field
  - Raw text with --raw flag

Output format:
  - JSON with identified themes and patterns

Example:
  ${0##*/} --days 7 < knowledge/events-*.jsonl
EOF
}

# Parse arguments using GNU getopt
PARSED=$(ks_parse_options "${0##*/}" "d:s:rf:" "days:,since:,raw,format:" "$@") || {
    usage >&2
    exit 1
}

eval set -- "$PARSED"

# Process options
while true; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -d|--days)
            ks_handle_days "$2"
            shift 2
            ;;
        -s|--since)
            ks_handle_since "$2"
            shift 2
            ;;
        -r|--raw)
            RAW_INPUT=true
            shift
            ;;
        -f|--format)
            ks_handle_format "$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            ks_unknown_option "$1"
            ;;
    esac
done

# Prepare input for analysis
input_file=$(mktemp)
if [[ "$RAW_INPUT" == "true" ]]; then
    # Input is already filtered content
    cat > "$input_file"
else
    # Input is JSONL events, extract content from time window
    filter_date=$(ks_get_filter_date "$DAYS" "$SINCE")
    jq -r --arg filter_date "$filter_date" \
        'select(.ts >= $filter_date) | .content' > "$input_file"
fi

# Check if we have any content
if [[ ! -s "$input_file" ]]; then
    echo '{"error": "No content to analyze"}' >&2
    rm -f "$input_file"
    exit 1
fi

# Get analysis from Claude using modular function
ANALYSIS=$(ks_claude_analyze "$KS_PROMPT_PATTERNS" < "$input_file")

rm -f "$input_file"

# Format output using modular formatter
ks_format_analysis "$ANALYSIS" "$FORMAT" "Recurring Thought Patterns"