#!/usr/bin/env bash
# identify-recurring-thought-patterns - Extract recurring themes from knowledge entries
# Pure analysis function: accepts input, returns themed analysis

set -euo pipefail

# Source environment and modular libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/tools/lib/claude.sh"    # For ks_claude_analyze, ks_format_analysis

# Default configuration
TIME_WINDOW_DAYS="${TIME_WINDOW_DAYS:-3}"
FORMAT="text"

# Usage
usage() {
    cat << EOF
Usage: ${0##*/} [options] < input

Identify recurring thought patterns and themes from knowledge entries.
Reads event content from stdin, outputs analysis to stdout.

Options:
  --days N          Filter to last N days (default: $TIME_WINDOW_DAYS)
  --raw             Input is already filtered content (skip date filtering)
  --format FORMAT   Output format: text, json (default: text)
  --help            Show this help message

Input format:
  - JSONL events (default) - will extract .content field
  - Raw text with --raw flag

Output format:
  - JSON with identified themes and patterns

Example:
  ${0##*/} --days 7 < knowledge/events-*.jsonl
EOF
}

# Parse arguments
RAW_INPUT=false
while [[ $# -gt 0 ]]; do
    case $1 in
        --days)
            TIME_WINDOW_DAYS="$2"
            shift 2
            ;;
        --raw)
            RAW_INPUT=true
            shift
            ;;
        --format)
            FORMAT="$2"
            shift 2
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1" >&2
            usage >&2
            exit 1
            ;;
    esac
done

# Prepare input for analysis
input_file=$(mktemp)
if [[ "$RAW_INPUT" == "true" ]]; then
    # Input is already filtered content
    cat > "$input_file"
else
    # Input is JSONL events, extract content from time window
    since_date=$(date -u -d "$TIME_WINDOW_DAYS days ago" +%Y-%m-%dT%H:%M:%SZ)
    jq -r --arg since_date "$since_date" \
        'select(.ts >= $since_date) | .content' > "$input_file"
fi

# Check if we have any content
if [[ ! -s "$input_file" ]]; then
    echo '{"error": "No content to analyze"}' >&2
    rm -f "$input_file"
    exit 1
fi

# Get analysis from Claude using modular function
ANALYSIS=$(ks_claude_analyze "$KS_PROMPT_PATTERNS" < "$input_file")

rm -f "$input_file"

# Format output using modular formatter
ks_format_analysis "$FORMAT" "$ANALYSIS" "Recurring Thought Patterns" \
    '.patterns[] | "## \(.pattern)\n\n\(.description)\n\n**Occurrences:** \(.occurrences)\n\n### Examples:\n\(.examples | map("- \"\(.)\"") | join("\n"))\n"' \
    '.patterns[] | "PATTERN: \(.pattern)\n\(.description)\nOccurrences: \(.occurrences)\nExamples:\n\(.examples | map("  - \"\(.)\"") | join("\n"))\n"'