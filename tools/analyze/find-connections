#!/usr/bin/env bash

# find-connections - Find conceptual connections between knowledge events

set -euo pipefail

# Source configuration and modular libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"
source "$KS_ROOT/lib/files.sh"
source "$KS_ROOT/lib/time.sh"
source "$KS_ROOT/lib/argparse.sh"
source "$KS_ROOT/tools/lib/queue.sh"
source "$KS_ROOT/tools/lib/claude.sh"

# Usage function
usage() {
    echo "Usage: find-connections [options]"
    echo ""
    echo "Options:"
    echo "  --topic TOPIC    Filter by specific topic"
    echo "  --days N         Analyze events from last N days (default: 30)"
    echo "  --since DATE     Analyze events since ISO date (overrides --days)"
    echo "  --format FORMAT  Output format: text, json, markdown (default: text)"
    echo "  -h, --help       Show this help message"
    echo ""
    echo "Find conceptual connections between knowledge events using AI analysis"
}

# Check for background analysis results
ks_check_background_results || true

# Default values
DAYS="30"
SINCE=""
TOPIC_FILTER=""
FORMAT="text"

# Parse arguments using GNU getopt
PARSED=$(ks_parse_options "find-connections" "d:s:t:f:" "days:,since:,topic:,format:" "$@") || {
    usage >&2
    exit 1
}

eval set -- "$PARSED"

# Process options
while true; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -d|--days)
            ks_handle_days "$2"
            shift 2
            ;;
        -s|--since)
            ks_handle_since "$2"
            shift 2
            ;;
        -t|--topic)
            TOPIC_FILTER="$2"
            shift 2
            ;;
        -f|--format)
            ks_handle_format "$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            ks_unknown_option "$1"
            ;;
    esac
done

# Extract events and analyze
CONTENT=$(ks_extract_events "$DAYS" "$SINCE" "$(ks_build_filter "" "$TOPIC_FILTER")")

if [[ -z "$CONTENT" ]]; then
    echo "No events found${TOPIC_FILTER:+ for topic '$TOPIC_FILTER'} in the last $DAYS days"
    exit 0
fi

# Get analysis from Claude using modular function
ANALYSIS=$(ks_claude_analyze "$KS_PROMPT_CONNECTIONS" <<< "$CONTENT")

# Format output using modular formatter
ks_format_analysis "$ANALYSIS" "$FORMAT" "Knowledge Connections"