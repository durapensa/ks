#!/usr/bin/env bash

# find-connections - Find connections between knowledge events (declarative version)

set -euo pipefail

# Source configuration and modular libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"
source "$KS_ROOT/lib/files.sh"
source "$KS_ROOT/lib/time.sh"
source "$KS_ROOT/lib/validation.sh"
source "$KS_ROOT/lib/error.sh"
source "$KS_ROOT/lib/usage.sh"
source "$KS_ROOT/tools/lib/queue.sh"
source "$KS_ROOT/tools/lib/claude.sh"
source "$KS_ROOT/tools/lib/analysis.sh"

# Check for background analysis results
ks_check_background_results || true

# Standardized usage function
usage() {
    declare -a arguments=()
    declare -a examples=(
        "find-connections --days 7"
        "find-connections --topic \"learning\" --format json"
    )
    ks_generate_usage \
        "Find non-obvious connections between knowledge events using AI analysis" \
        "find-connections" \
        "[options]" \
        "ANALYZE" \
        arguments \
        examples
}

# Build getopt options
LONG_OPTS="help"
LONG_OPTS="${LONG_OPTS},days:"
LONG_OPTS="${LONG_OPTS},since:"
LONG_OPTS="${LONG_OPTS},type:"
LONG_OPTS="${LONG_OPTS},topic:"
LONG_OPTS="${LONG_OPTS},format:"
LONG_OPTS="${LONG_OPTS},verbose"

# Parse options with getopt (dummy -o h required for long options)
OPTS=$($KS_GETOPT -o h -l "$LONG_OPTS" -- "$@") || ks_exit_usage "Invalid options provided"
eval set -- "$OPTS"

# Process options
while true; do
    case "$1" in
        --help) usage; exit 0 ;;
        --days) DAYS="$2"; shift 2 ;;
        --since) SINCE="$2"; shift 2 ;;
        --type) TYPE="$2"; shift 2 ;;
        --topic) TOPIC="$2"; shift 2 ;;
        --format) FORMAT="$2"; shift 2 ;;
        --verbose) VERBOSE=true; shift ;;
        --) shift; break ;;
        *) ks_exit_error "Internal argument parsing error" ;;
    esac
done

# Apply defaults and initialize variables
DAYS="${DAYS:-7}"
FORMAT="${FORMAT:-text}"
SINCE="${SINCE:-}"
TYPE="${TYPE:-}"
TOPIC="${TOPIC:-}"
VERBOSE="${VERBOSE:-}"

# Validate options
ks_validate_analyze_options "$DAYS" "$SINCE" "$TYPE" "$FORMAT" "$VERBOSE"

# Extract events and analyze
CONTENT=$(ks_extract_events "$DAYS" "$SINCE" "$(ks_build_filter "$TYPE" "$TOPIC")")

[[ -z "$CONTENT" ]] && { echo "No events found in the last $DAYS days"; exit 0; }

# Prepare AI prompt
PROMPT="Analyze the following knowledge events from the last $DAYS days and find non-obvious connections.

$CONTENT

Look for interesting patterns, relationships, or connections between different thoughts and observations. Return ONLY valid JSON in this format:
{
  \"connections\": [
    {
      \"events\": [\"timestamp1: event1\", \"timestamp2: event2\"],
      \"relationship\": \"description of connection\",
      \"insight\": \"what this connection reveals\",
      \"confidence\": 0.8
    }
  ]
}

If no meaningful connections are found, return: {\"connections\": []}"

# Analyze with Claude
ANALYSIS=$(ks_claude_analyze "$PROMPT" || echo "Error: Analysis failed")

# Output based on format
ks_format_analysis "$ANALYSIS" "$FORMAT" "Connection Analysis"