#!/usr/bin/env bash
# Interactive tool to review and approve/reject analysis findings
# Run this in a separate terminal when ks notifies of pending findings

set -euo pipefail

# Source environment and modular libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"      # For ks_timestamp
source "$KS_ROOT/tools/lib/queue.sh"     # For ks_queue_list_pending, ks_queue_clear

# ANSI color codes
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Usage information
usage() {
    cat << EOF
Usage: ${0##*/} [options]

Interactive tool to review findings from background analyses.
Run this in a separate terminal when notified of pending reviews.

Options:
  --list        List pending analyses without reviewing
  --help        Show this help message

This tool will:
1. Show each finding from completed analyses
2. Allow you to approve (y) or reject (n) each finding
3. Approved findings are integrated into your knowledge base
4. Clear the analysis from the queue when complete

Examples:
  ${0##*/}           # Start interactive review
  ${0##*/} --list    # See what's pending
EOF
}

# Display a finding with formatting
display_finding() {
    local finding="$1"
    local index="$2"
    local total="$3"
    
    echo -e "\n${BOLD}Finding ${index}/${total}${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    # Extract finding details - handle various analysis output formats
    local content=$(echo "$finding" | jq -r '.content // .theme // .insight // .pattern // .description // .name // "No content"')
    local name=$(echo "$finding" | jq -r '.name // ""')
    local description=$(echo "$finding" | jq -r '.description // ""')
    local type=$(echo "$finding" | jq -r '.type // "theme"')
    local confidence=$(echo "$finding" | jq -r '.confidence // .frequency // "N/A"')
    local context=$(echo "$finding" | jq -r '.context // .supporting_quotes // ""')
    
    # Pattern-specific fields
    local pattern=$(echo "$finding" | jq -r '.pattern // ""')
    local occurrences=$(echo "$finding" | jq -r '.occurrences // ""')
    local examples=$(echo "$finding" | jq -r '.examples // ""')
    
    # Handle pattern-specific display
    if [[ -n "$pattern" ]] && [[ "$pattern" != "null" ]] && [[ "$pattern" != "" ]]; then
        # This is a pattern finding
        echo -e "${BOLD}Pattern:${NC} $pattern"
        
        if [[ -n "$description" ]] && [[ "$description" != "null" ]]; then
            echo -e "${BOLD}Description:${NC} $description"
        fi
        
        if [[ -n "$occurrences" ]] && [[ "$occurrences" != "null" ]] && [[ "$occurrences" != "" ]]; then
            echo -e "${BOLD}Occurrences:${NC} $occurrences"
        fi
        
        if [[ -n "$examples" ]] && [[ "$examples" != "null" ]] && [[ "$examples" != "[]" ]] && [[ "$examples" != "" ]]; then
            echo -e "\n${BOLD}Examples:${NC}"
            if echo "$examples" | jq -e '. | type == "array"' >/dev/null 2>&1; then
                echo "$examples" | jq -r '.[]' | sed 's/^/  • /'
            fi
        fi
    else
        # Default display for non-pattern findings
        if [[ -n "$name" ]] && [[ "$name" != "null" ]]; then
            content="$name"
            if [[ -n "$description" ]] && [[ "$description" != "null" ]]; then
                content="$content: $description"
            fi
        fi
        
        echo -e "${BOLD}Type:${NC} $type"
        if [[ "$confidence" != "N/A" ]]; then
            echo -e "${BOLD}Confidence:${NC} $confidence"
        fi
        
        echo -e "\n${BOLD}Content:${NC}"
        echo "$content" | fold -s -w 70 | sed 's/^/  /'
        
        if [[ -n "$context" ]] && [[ "$context" != "null" ]] && [[ "$context" != "[]" ]]; then
            echo -e "\n${BOLD}Supporting Evidence:${NC}"
            if echo "$context" | jq -e '. | type == "array"' >/dev/null 2>&1; then
                echo "$context" | jq -r '.[]' | sed 's/^/  • /'
            else
                echo "$context" | fold -s -w 70 | sed 's/^/  /'
            fi
        fi
    fi
    
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

# Integrate approved finding into knowledge base
integrate_finding() {
    local finding="$1"
    local analysis_type="$2"
    local finding_index="$3"
    local completed_at="$4"
    
    local timestamp=$(ks_timestamp)
    
    # Determine event type based on analysis
    local event_type="insight"  # Default to insight
    case "$analysis_type" in
        themes|theme-analysis)
            event_type="insight"
            ;;
        connections|connection-analysis)
            event_type="connection"
            ;;
        patterns|pattern-analysis)
            event_type="insight"
            ;;
    esac
    
    # Create metadata for approved.jsonl
    local metadata=$(jq -nc \
        --arg source "background-analysis" \
        --arg approved_at "$timestamp" \
        --arg analysis_type "$analysis_type" \
        --arg model "${KS_MODEL:-sonnet}" \
        --arg completed_at "${completed_at:-unknown}" \
        '{
            source: $source,
            approved_at: $approved_at,
            analysis_type: $analysis_type,
            model: $model,
            completed_at: $completed_at
        }')
    
    # Write full finding to derived/approved.jsonl only
    mkdir -p "$KS_DERIVED_DIR"
    local full_entry=$(jq -nc \
        --arg ts "$timestamp" \
        --arg type "$event_type" \
        --argjson finding "$finding" \
        --argjson metadata "$metadata" \
        '{
            ts: $ts,
            type: $type,
            finding: $finding,
            metadata: $metadata
        }')
    
    echo "$full_entry" >> "$KS_DERIVED_DIR/approved.jsonl"
    
    return 0
}

# Store rejected finding for future learning
reject_finding() {
    local finding="$1"
    local analysis_type="$2"
    local rejection_reason="$3"
    local improvement_notes="$4"
    
    mkdir -p "$KS_DERIVED_DIR"
    
    local timestamp=$(ks_timestamp)
    local rejected_entry=$(jq -nc \
        --arg ts "$timestamp" \
        --arg analysis_type "$analysis_type" \
        --argjson finding "$finding" \
        --arg rejection_reason "$rejection_reason" \
        --arg improvement_notes "$improvement_notes" \
        '{
            ts: $ts,
            analysis_type: $analysis_type,
            finding: $finding,
            rejection: {
                reason: $rejection_reason,
                notes: $improvement_notes,
                rejected_at: $ts
            }
        }')
    
    echo "$rejected_entry" >> "$KS_DERIVED_DIR/rejected.jsonl"
    
    return 0
}

# Review findings for a specific analysis
review_analysis() {
    local analysis_type="$1"
    local findings_file="$2"
    local completed_at="${3:-}"  # Optional completed_at timestamp
    
    if [[ ! -f "$findings_file" ]]; then
        echo -e "${RED}Error: Findings file not found: $findings_file${NC}"
        return 1
    fi
    
    # Load findings
    local findings_raw=$(jq -r '.findings' "$findings_file" 2>/dev/null)
    if [[ "$findings_raw" == "null" ]] || [[ "$findings_raw" == "[]" ]]; then
        local findings=""
        local count=0
    else
        local findings=$(jq -c '.findings[]? // .[]' "$findings_file" 2>/dev/null | grep -v '^null$' || echo "")
        local count=$(echo "$findings" | grep -c . || echo "0")
    fi
    
    if [[ -z "$findings" ]] || [[ "$count" -eq 0 ]]; then
        echo -e "${YELLOW}Analysis completed but found no significant patterns or themes.${NC}"
        echo -e "This can happen when there isn't enough data or patterns aren't strong enough."
        echo -e "${GREEN}✓ Clearing from queue (no action needed)${NC}"
        ks_queue_clear "$analysis_type"
        return 0
    fi
    
    echo -e "\n${BOLD}Reviewing $analysis_type findings${NC}"
    echo -e "Found ${GREEN}$count${NC} findings to review\n"
    
    local approved=0
    local rejected=0
    local index=0
    
    # Review each finding
    while IFS= read -r finding; do
        index=$((index + 1))
        
        # Skip empty lines
        [ -z "$finding" ] && continue
        
        # Display the finding
        display_finding "$finding" "$index" "$count"
        
        # Get user decision
        while true; do
            echo -ne "\n${BOLD}Approve this finding? (y/n/q):${NC} "
            read -r response < /dev/tty
            
            case "$response" in
                [yY])
                    if integrate_finding "$finding" "$analysis_type" "$index" "$completed_at"; then
                        echo -e "${GREEN}✓ Finding approved and integrated${NC}"
                        approved=$((approved + 1))
                    else
                        echo -e "${RED}✗ Failed to integrate finding${NC}"
                    fi
                    break
                    ;;
                [nN])
                    # Ask for rejection reason
                    echo -ne "${BOLD}Rejection reason (too_vague/not_relevant/duplicate/other):${NC} "
                    read -r rejection_reason < /dev/tty
                    
                    # Validate rejection reason
                    case "$rejection_reason" in
                        too_vague|not_relevant|duplicate|other)
                            ;;
                        *)
                            rejection_reason="other"
                            ;;
                    esac
                    
                    echo -ne "${BOLD}Improvement notes (optional):${NC} "
                    read -r improvement_notes < /dev/tty
                    
                    if reject_finding "$finding" "$analysis_type" "$rejection_reason" "$improvement_notes"; then
                        echo -e "${YELLOW}✗ Finding rejected and stored for learning${NC}"
                    fi
                    rejected=$((rejected + 1))
                    break
                    ;;
                [qQ])
                    echo -e "\n${YELLOW}Review cancelled. Queue not cleared.${NC}"
                    return 1
                    ;;
                *)
                    echo -e "${RED}Please enter y (yes), n (no), or q (quit)${NC}"
                    ;;
            esac
        done
    done <<< "$findings"
    
    # Summary
    echo -e "\n${BOLD}Review Complete${NC}"
    echo -e "Approved: ${GREEN}$approved${NC}"
    echo -e "Rejected: ${YELLOW}$rejected${NC}"
    
    # Clear from queue
    ks_queue_clear "$analysis_type"
    echo -e "\n${GREEN}✓ Analysis cleared from queue${NC}"
    
    # Archive the findings file
    local archive_dir="$KS_BACKGROUND_DIR/reviewed"
    mkdir -p "$archive_dir"
    mv "$findings_file" "$archive_dir/$(basename "$findings_file").$(date +%Y%m%d-%H%M%S)"
    
    return 0
}

# List pending analyses
list_pending() {
    local pending=$(ks_queue_list_pending)
    
    if [[ "$pending" == "[]" ]]; then
        echo -e "${YELLOW}No analyses pending review${NC}"
        return 0
    fi
    
    echo -e "${BOLD}Pending Analyses:${NC}\n"
    
    echo "$pending" | jq -r '.[] | "• \(.type) - completed at \(.value.completed_at)"'
    
    echo -e "\nRun ${0##*/} to review these findings"
}

# Get analysis preview info
get_analysis_preview() {
    local findings_file="$1"
    
    if [[ ! -f "$findings_file" ]]; then
        echo "File not found"
        return
    fi
    
    # Check if findings is null or empty array
    local findings_raw=$(jq -r '.findings' "$findings_file" 2>/dev/null)
    if [[ "$findings_raw" == "null" ]] || [[ "$findings_raw" == "[]" ]]; then
        echo "Empty (no findings)"
        return
    fi
    
    local findings=$(jq -c '.findings[]? // .[]' "$findings_file" 2>/dev/null | grep -v '^null$' || echo "")
    local count=$(echo "$findings" | grep -c . || echo "0")
    
    if [[ "$count" -eq 0 ]]; then
        echo "Empty (no findings)"
    else
        echo "$count findings"
    fi
}

# Main review loop
main_review() {
    # Check if running interactively
    if [ ! -t 0 ] || [ ! -t 1 ]; then
        echo "Error: This tool must be run interactively, not with piped input." >&2
        echo "Please run directly in your terminal: $0" >&2
        exit 1
    fi
    # Check for pending analyses
    local pending=$(ks_queue_list_pending)
    
    if [[ "$pending" == "[]" ]]; then
        echo -e "${YELLOW}No analyses pending review${NC}"
        exit 0
    fi
    
    echo -e "${BOLD}Knowledge System - Finding Review${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    # Read analyses into array to avoid subshell issues
    local analyses=()
    while IFS= read -r line; do
        analyses+=("$line")
    done < <(echo "$pending" | jq -c '.[]')
    
    # Process each pending analysis
    for analysis in "${analyses[@]}"; do
        local type=$(echo "$analysis" | jq -r '.type')
        local findings_file=$(echo "$analysis" | jq -r '.value.findings_file')
        local completed_at=$(echo "$analysis" | jq -r '.value.completed_at')
        local preview=$(get_analysis_preview "$findings_file")
        
        echo -e "\n${BOLD}Analysis:${NC} $type"
        echo -e "${BOLD}Completed:${NC} $completed_at"
        echo -e "${BOLD}Status:${NC} $preview"
        
        # Ask if user wants to review this analysis
        echo -ne "\nReview this analysis now? (y/n): "
        read -r response < /dev/tty
        
        case "$response" in
            [yY])
                review_analysis "$type" "$findings_file" "$completed_at"
                ;;
            *)
                echo -e "${YELLOW}Skipped${NC}"
                ;;
        esac
    done
    
    echo -e "\n${GREEN}Review session complete${NC}"
}

# Parse arguments
case "${1:-}" in
    --list)
        list_pending
        ;;
    --help)
        usage
        ;;
    "")
        main_review
        ;;
    *)
        echo "Unknown option: $1" >&2
        usage >&2
        exit 1
        ;;
esac