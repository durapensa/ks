#!/usr/bin/env bash

# events - Append events to knowledge stream

set -euo pipefail

# Source configuration and modular libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"
source "$KS_ROOT/lib/events.sh"
source "$KS_ROOT/lib/error.sh"
source "$KS_ROOT/lib/usage.sh"

# Standardized usage function
usage() {
    declare -a arguments=(
        "TYPE               Event type (thought, insight, observation, etc.)"
        "TOPIC              Topic or category for the event"
        "CONTENT            Event content (optional - reads from stdin if omitted)"
    )
    declare -a examples=(
        "events thought \"learning\" \"Discovered new pattern in data\""
        "events insight \"productivity\" \"Focus blocks work better in morning\""
        "echo \"Content from pipe\" | events thought \"learning\""
    )
    ks_generate_usage \
        "Append events to knowledge stream" \
        "events" \
        "[options] TYPE TOPIC [CONTENT]" \
        "CAPTURE_INPUT" \
        arguments \
        examples
}

# Parse arguments (handle options before positional args)
ARGS=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help)
            usage
            exit 0
            ;;
        --*)
            ks_exit_usage "Unknown option: $1"
            ;;
        *)
            ARGS+=("$1")
            shift
            ;;
    esac
done

# Validate positional arguments
if [[ ${#ARGS[@]} -lt 2 ]]; then
    ks_exit_usage "Required arguments missing"
fi

TYPE="${ARGS[0]}"
TOPIC="${ARGS[1]}"
CONTENT=""

# Validate event type
ks_validate_event_type "$TYPE" || exit $EXIT_VALIDATION

# Get content from argument or stdin
if [[ ${#ARGS[@]} -ge 3 ]]; then
    CONTENT="${ARGS[2]}"
else
    CONTENT=$(cat)
fi

# Generate timestamp
TIMESTAMP=$(ks_timestamp)

# Detect [Claude] prefix for stream separation
if [[ "$CONTENT" =~ ^\[Claude\]\ * ]]; then
    TARGET_LOG="$KS_DERIVED_DIR/stream.jsonl"
    CONTENT="${CONTENT#\[Claude\] }"
    METADATA='{"source": "claude-conversation"}'
    mkdir -p "$KS_DERIVED_DIR"
else
    TARGET_LOG="$KS_HOT_LOG"
    METADATA='{}'
fi

# Create JSON event (compact format for JSONL)
jq -nc \
    --arg ts "$TIMESTAMP" \
    --arg type "$TYPE" \
    --arg topic "$TOPIC" \
    --arg content "$CONTENT" \
    --argjson metadata "$METADATA" \
    '{ts: $ts, type: $type, topic: $topic, content: $content, metadata: $metadata}' \
    >> "$TARGET_LOG"

if [[ "$TARGET_LOG" == "$KS_HOT_LOG" ]]; then
    echo "Event logged: $TYPE/$TOPIC"
else
    echo "Event logged to stream: $TYPE/$TOPIC"
fi

# Check event triggers for background analyses
$KS_TOOLS_DIR/plumbing/check-event-triggers silent &