#!/usr/bin/env bash

# events - Append events to knowledge stream

set -euo pipefail

# Source configuration and modular libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"
source "$KS_ROOT/lib/events.sh"
source "$KS_ROOT/lib/argparse.sh"

# Define usage
ks_define_usage "Description: Append events to knowledge stream"

# Initialize and define examples
ks_init_options
ks_example "thought \"learning\" \"Discovered new pattern in data\""
ks_example "insight \"productivity\" \"Focus blocks work better in morning\""

# Process options
ks_process_options "$@"

# Get positional arguments
if [[ ${#REMAINING_ARGS[@]} -lt 2 ]]; then
    echo "Error: Required arguments missing" >&2
    usage
    exit 1
fi

TYPE="${REMAINING_ARGS[0]}"
TOPIC="${REMAINING_ARGS[1]}"
CONTENT=""

# Validate event type
ks_validate_event_type "$TYPE" || exit 1

# Get content from argument or stdin
if [[ ${#REMAINING_ARGS[@]} -ge 3 ]]; then
    CONTENT="${REMAINING_ARGS[2]}"
else
    CONTENT=$(cat)
fi

# Generate timestamp
TIMESTAMP=$(ks_timestamp)

# Detect [Claude] prefix for stream separation
if [[ "$CONTENT" =~ ^\[Claude\]\ * ]]; then
    TARGET_LOG="$KS_DERIVED_DIR/stream.jsonl"
    CONTENT="${CONTENT#\[Claude\] }"
    METADATA='{"source": "claude-conversation"}'
    mkdir -p "$KS_DERIVED_DIR"
else
    TARGET_LOG="$KS_HOT_LOG"
    METADATA='{}'
fi

# Create JSON event (compact format for JSONL)
jq -nc \
    --arg ts "$TIMESTAMP" \
    --arg type "$TYPE" \
    --arg topic "$TOPIC" \
    --arg content "$CONTENT" \
    --argjson metadata "$METADATA" \
    '{ts: $ts, type: $type, topic: $topic, content: $content, metadata: $metadata}' \
    >> "$TARGET_LOG"

if [[ "$TARGET_LOG" == "$KS_HOT_LOG" ]]; then
    echo "Event logged: $TYPE/$TOPIC"
else
    echo "Event logged to stream: $TYPE/$TOPIC"
fi

# Check event triggers for background analyses
$KS_TOOLS_DIR/plumbing/check-event-triggers silent &