#!/usr/bin/env bash

# configure - Interactive YAML configuration builder for logex conversations

set -euo pipefail

# Source configuration and modular libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"
source "$KS_ROOT/lib/error.sh"
source "$KS_ROOT/lib/usage.sh"
source "$KS_ROOT/lib/argparse.sh"

# Standardized usage function
usage() {
    declare -a arguments=()
    declare -a examples=(
        "configure                           # Interactive configuration wizard"
        "configure --template simple        # Use simple 2-party template"
        "configure --output my-dialogue     # Save to specific directory"
    )
    ks_generate_usage \
        "Interactive YAML configuration builder for logex conversations" \
        "configure" \
        "[options]" \
        "LOGEX" \
        arguments \
        examples
}

# Parse arguments using category-based system
ks_parse_category_args "LOGEX" -- "$@"

# Configuration builder functions

prompt_input() {
    local prompt="$1"
    local default="${2:-}"
    local response
    
    if [[ -n "$default" ]]; then
        printf "%s [%s]: " "$prompt" "$default"
    else
        printf "%s: " "$prompt"
    fi
    
    read -r response
    echo "${response:-$default}"
}

prompt_yes_no() {
    local prompt="$1"
    local default="${2:-n}"
    local response
    
    printf "%s [y/N]: " "$prompt"
    read -r response
    
    case "${response:-$default}" in
        [Yy]|[Yy][Ee][Ss]) echo "true" ;;
        *) echo "false" ;;
    esac
}

validate_conversant_name() {
    local name="$1"
    
    if [[ -z "$name" ]]; then
        echo "Error: conversant name cannot be empty" >&2
        return 1
    fi
    
    if ! [[ "$name" =~ ^[a-zA-Z][a-zA-Z0-9_-]*$ ]]; then
        echo "Error: conversant name must start with letter and contain only letters, numbers, hyphens, underscores" >&2
        return 1
    fi
    
    return 0
}

create_simple_config() {
    local conversation_name="$1"
    local config_file="$2"
    
    echo "Creating simple 2-party dialogue configuration..."
    
    # Use default values for template mode
    local conversation_topic="general discussion"
    local max_turns="5"
    local turn_delay="0"
    local conversant1_name="alice"
    local conversant1_persona="You are a helpful assistant participating in a dialogue."
    local conversant2_name="bob"
    local conversant2_persona="You are a helpful assistant participating in a dialogue."
    local initial_prompt="Hello! Let's discuss $conversation_topic."
    
    # Generate YAML configuration
    cat > "$config_file" << EOF
# Logex conversation configuration
# Generated by tools/logex/configure on $(date)

conversation:
  name: "$conversation_name"
  topic: "$conversation_topic"
  description: "Automated dialogue between $conversant1_name and $conversant2_name"

settings:
  max_turns_per_conversant: $max_turns
  turn_delay_seconds: $turn_delay
  rate_limit_delay: 0

conversants:
  $conversant1_name:
    type: "claude"
    persona: "$conversant1_persona"
    
  $conversant2_name:
    type: "claude"
    persona: "$conversant2_persona"

dialogue:
  starter: "$conversant1_name"
  initial_prompt: "$initial_prompt"
  
  turn_taking:
    strategy: "round_robin"
    
exit_conditions:
  max_total_turns: $((max_turns * 2))
  keywords: ["goodbye", "farewell", "end conversation"]
  manual_stop: true

# Future expansion areas
experimental:
  context_injection: true
  resume_capability: false
EOF

    echo
    echo "Configuration saved to: $config_file"
}

interactive_config() {
    local conversation_name="$1"
    local config_file="$2"
    
    echo "Interactive logex configuration builder"
    echo "======================================"
    echo
    
    # For now, just use the simple template
    # This can be expanded later with more sophisticated options
    create_simple_config "$conversation_name" "$config_file"
    
    echo
    echo "Configuration complete!"
    echo "To start the conversation, run:"
    echo "  ks logex orchestrate $conversation_name"
}

# Main execution
main() {
    if [[ -n "$STATUS" ]]; then
        echo "Configuration builder status: operational"
        exit 0
    fi
    
    # Determine conversation name and directory
    local conversation_name
    if [[ -n "$OUTPUT" ]]; then
        conversation_name="$OUTPUT"
    else
        conversation_name=$(prompt_input "Conversation name" "my-dialogue")
    fi
    
    # Sanitize and create directory
    local safe_name
    safe_name=$(ks_create_conversation_dirs "$conversation_name")
    
    local config_file="$safe_name/logex-config.yaml"
    
    # Check if config already exists
    if [[ -f "$config_file" && -z "$FORCE" ]]; then
        echo "Configuration already exists: $config_file"
        echo "Use --force to overwrite"
        exit 1
    fi
    
    if [[ -n "$DRY_RUN" ]]; then
        echo "Would create conversation directory: $safe_name"
        echo "Would create configuration file: $config_file"
        exit 0
    fi
    
    # Create configuration based on template or interactively
    if [[ -n "$TEMPLATE" ]]; then
        case "$TEMPLATE" in
            "simple"|"2-party")
                create_simple_config "$safe_name" "$config_file"
                ;;
            *)
                ks_exit_error "Unknown template: $TEMPLATE. Available: simple, 2-party"
                ;;
        esac
    else
        interactive_config "$safe_name" "$config_file"
    fi
    
    if [[ -n "$VERBOSE" ]]; then
        echo "Created conversation structure in: $safe_name"
    fi
}

main "$@"