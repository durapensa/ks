#!/usr/bin/env bash

# claude-instance - Claude CLI wrapper for isolated conversant processes in logex conversations
# Handles persona injection, context isolation, and response capture

set -euo pipefail

# Source configuration and modular libraries
source "${0%/*}/../../.ks-env"
source "$KS_ROOT/lib/core.sh"
source "$KS_ROOT/lib/error.sh"
source "$KS_ROOT/lib/usage.sh"
source "$KS_ROOT/lib/argparse.sh"
source "$KS_ROOT/tools/lib/claude.sh"

# Configuration variables
declare -g CONVERSATION_DIR=""
declare -g CONVERSANT_NAME=""
declare -g PERSONA=""
declare -g CONVERSATION_CONTEXT=""
declare -g LOG_FILE=""
declare -g JSONL_FILE=""

# Standardized usage function
usage() {
    declare -a arguments=(
        "CONVERSANT_NAME          Name of the conversant (via --conversant)"
        "CONVERSATION_DIR         Conversation directory (via --conversation-dir)"
    )
    declare -a examples=(
        "claude-instance --conversant alice --conversation-dir ./my-chat"
        "claude-instance --conversant bob --conversation-dir ./my-chat --persona \"You are helpful\""
        "claude-instance --conversant alice --conversation-dir ./chat --context \"Previous context\""
    )
    ks_generate_usage \
        "Claude CLI wrapper for isolated conversant processes in logex conversations" \
        "claude-instance" \
        "--conversant NAME --conversation-dir DIR [options]" \
        "LOGEX" \
        arguments \
        examples
}

# Parse arguments using category-based system
ks_parse_category_args "LOGEX" -- "$@"

# Validate required arguments
if [[ -z "$CONVERSANT" ]]; then
    ks_exit_usage "--conversant is required"
fi

if [[ -z "$CONVERSATION_DIR" ]]; then
    ks_exit_usage "--conversation-dir is required"
fi

# Set variable aliases for compatibility with existing code
CONVERSANT_NAME="$CONVERSANT"
CONVERSATION_CONTEXT="$CONTEXT"

# Set derived paths (absolute paths)
LOG_FILE="$(realpath "$CONVERSATION_DIR")/conversants/$CONVERSANT_NAME.log"
JSONL_FILE="$(realpath "$CONVERSATION_DIR")/conversants/$CONVERSANT_NAME.jsonl"

# Load conversant configuration
load_conversant_config() {
    local config_file="$CONVERSATION_DIR/logex-config.yaml"
    
    if [[ ! -f "$config_file" ]]; then
        echo "Error: Configuration file not found: $config_file" >&2
        exit 1
    fi
    
    # Extract persona if not provided via argument
    if [[ -z "$PERSONA" ]]; then
        PERSONA=$(grep -A 3 "^  $CONVERSANT_NAME:" "$config_file" | grep "persona:" | sed 's/.*persona: *"\([^"]*\)".*/\1/')
    fi
    
    if [[ -z "$PERSONA" ]]; then
        echo "Error: No persona found for conversant '$CONVERSANT_NAME'" >&2
        exit 1
    fi
}

# Logging functions
log_to_file() {
    local level="$1"
    local message="$2"
    local timestamp
    timestamp=$(ks_timestamp)
    
    echo "[$timestamp] [$level] [$CONVERSANT_NAME] $message" >> "$LOG_FILE"
}

log_info() {
    log_to_file "INFO" "$1"
}

log_error() {
    log_to_file "ERROR" "$1"
}

# Event recording
record_conversant_event() {
    local event_type="$1"
    local content="$2"
    local timestamp
    timestamp=$(ks_timestamp)
    
    # Properly escape content as JSON string, handling multiline content
    local escaped_content
    escaped_content=$(printf '%s' "$content" | jq -Rs .)
    
    local event_json="{\"timestamp\":\"$timestamp\",\"type\":\"$event_type\",\"conversant\":\"$CONVERSANT_NAME\",\"content\":$escaped_content}"
    
    # Write to individual conversant file for detailed logging
    echo "$event_json" >> "$JSONL_FILE"
    
    # Claude instance events are all orchestration events
    # Knowledge events come from Claude using 'ks events' commands directly
    local orchestration_log="$CONVERSATION_DIR/$KS_CONVERSATION_ORCHESTRATION_LOG"
    mkdir -p "$(dirname "$orchestration_log")"
    echo "$event_json" >> "$orchestration_log"
}

# Claude CLI interaction
setup_claude_environment() {
    log_info "Setting up Claude environment for conversant: $CONVERSANT_NAME"
    
    # Create conversant-specific directory structure
    local conversant_dir="$CONVERSATION_DIR/conversants/$CONVERSANT_NAME"
    mkdir -p "$conversant_dir"
    
    # Create .claude directory for Claude CLI initialization
    mkdir -p "$conversant_dir/.claude"
    
    # Create events directory for knowledge capture (Phase 3)
    mkdir -p "$conversant_dir/events"
    
    # Create symlinks to ks tools for knowledge capture
    if [[ -n "${KS_ROOT:-}" && -d "$KS_ROOT/tools" ]]; then
        ln -sf "$KS_ROOT/tools" "$conversant_dir/tools"
        # Also create ks command symlink for convenience
        ln -sf "$KS_ROOT/ks" "$conversant_dir/ks"
    fi
    
    # Ensure log files exist
    touch "$LOG_FILE"
    touch "$JSONL_FILE"
    
    # Generate complete ks-instructions.md file with persona, context, and tools
    create_claude_instructions
    
    # Copy proven CLAUDE.md behavior directives from interactive mode
    copy_claude_behavior_directives
    
    log_info "Environment setup complete with knowledge capture directories"
}

create_claude_instructions() {
    local instructions_file="$CONVERSATION_DIR/conversants/$CONVERSANT_NAME/.claude/ks-instructions.md"
    
    log_info "Creating Claude instructions file: $instructions_file"
    
    {
        echo "# Logex Conversant: $CONVERSANT_NAME"
        echo ""
        echo "See @CLAUDE.md for core behavioral directives and tool usage patterns."
        echo ""
        echo "## Persona"
        echo ""
        echo "$PERSONA"
        echo ""
        
        if [[ -n "$CONVERSATION_CONTEXT" ]]; then
            echo "## Current Context"
            echo ""
            echo "$CONVERSATION_CONTEXT"
            echo ""
        fi
        
        echo "## Logex Instructions"
        echo ""
        echo "You are participating in an automated dialogue as '$CONVERSANT_NAME'. This is part of a logex (dialogue composer) conversation system."
        echo ""
        echo "**Important Guidelines for Automated Conversation:**"
        echo "- Provide a single, focused response when prompted"
        echo "- Stay in character as '$CONVERSANT_NAME' throughout the conversation"
        echo "- You can use ks capture tools (events, query) to record insights or search existing knowledge"
        echo "- After providing your response, type 'END_SESSION' to conclude your turn"
        echo "- Keep responses conversational but concise (1-3 paragraphs)"
        echo "- Use tools proactively to capture interesting insights from the dialogue"
        echo ""
        echo "**IMPORTANT: Use Knowledge Capture Tools During Conversation**"
        echo ""
        echo "As you engage in this dialogue, actively use the knowledge system tools to capture insights, connections, and observations. Include these tool commands directly in your response text using backticks:"
        echo ""
        echo "Examples of tool usage:"
        echo "- \`tools/capture/events insight \"systems-thinking\" \"Discovered interesting parallel between biological and software systems\"\`"
        echo "- \`tools/capture/events connection \"complexity-science\" \"Software architecture can learn from adaptive systems principles\"\`"
        echo "- \`tools/capture/query \"emergence\" --days 30\` (to search for related concepts)"
        echo "- \`tools/capture/events observation \"dialogue-patterns\" \"Notice how conversation reveals new perspectives through interaction\"\`"
        echo ""
        echo "**When to use tools:**"
        echo "- When you identify an insight worth preserving"
        echo "- When you notice connections between concepts being discussed"
        echo "- When you want to search for related knowledge"
        echo "- When the conversation reveals interesting patterns"
        echo ""
        echo "**Tool format:** Always use backticks around complete commands like \`tools/capture/events insight \"topic\" \"content\"\`"
        echo ""
        
        # Include the complete ks tools reference from show_claude_help
        echo "## Knowledge System Tools"
        echo ""
        echo "Core knowledge system CLI and key capture tools."
        echo "Each tool can be invoked directly using the paths shown below."
        echo ""
        
        # Use the same concise tool help as interactive mode
        echo "ks --claudehelp"
        echo ""
        echo "Description: Knowledge system CLI for interactive capture and analysis."
        echo ""
        echo "Usage: ks [OPTION]... [SUBCOMMAND] [ARGS]..."
        echo ""
        echo "Key capture tools:"
        echo "  events       Append events to knowledge stream"
        echo "  query        Query the knowledge graph database"
        echo ""
        echo "Examples:"
        echo "  tools/capture/events insight \"topic\" \"discovered insight\""
        echo "  tools/capture/query --concepts"
        echo ""
        
        # Add tool reference - we'll enhance this to include actual show_claude_help output
        echo "---"
        echo "*Logex conversation context for $CONVERSANT_NAME*"
        echo "*Working directory: $CONVERSATION_DIR/conversants/$CONVERSANT_NAME*"
        
    } > "$instructions_file"
    
    log_info "Claude instructions created: ${#PERSONA} chars persona, context: ${CONVERSATION_CONTEXT:+present}"
}

copy_claude_behavior_directives() {
    local claude_md_source="$KS_ROOT/chat/CLAUDE.md"
    local claude_md_target="$CONVERSATION_DIR/conversants/$CONVERSANT_NAME/.claude/CLAUDE.md"
    
    if [[ -f "$claude_md_source" ]]; then
        cp "$claude_md_source" "$claude_md_target"
        log_info "Copied CLAUDE.md behavior directives from interactive mode"
    else
        log_info "Warning: CLAUDE.md not found at $claude_md_source"
    fi
}

run_claude_session() {
    log_info "Starting real Claude session for: $CONVERSANT_NAME"
    
    # Record session start
    record_conversant_event "session_started" "persona: $PERSONA, context: ${CONVERSATION_CONTEXT:-none}"
    
    # Change to conversant directory where .claude/ks-instructions.md is located
    local conversant_dir="$CONVERSATION_DIR/conversants/$CONVERSANT_NAME"
    
    log_info "Running Claude CLI in: $conversant_dir"
    log_info "Instructions file: .claude/ks-instructions.md"
    
    # Run actual Claude CLI in the conversant directory
    local claude_output
    local claude_exit_code
    
    # Run Claude and capture output
    cd "$conversant_dir" || {
        log_error "Failed to change to conversant directory: $conversant_dir"
        return 1
    }
    
    # Construct full prompt by reading instruction files directly
    local claude_md_file="$conversant_dir/.claude/CLAUDE.md"
    local instructions_file="$conversant_dir/.claude/ks-instructions.md"
    
    local claude_directives=""
    if [[ -f "$claude_md_file" ]]; then
        claude_directives=$(cat "$claude_md_file")
    fi
    
    local persona_instructions=""
    if [[ -f "$instructions_file" ]]; then
        persona_instructions=$(cat "$instructions_file")
    fi
    
    # Construct complete prompt with all context
    local initial_prompt="$claude_directives

$persona_instructions

---

Please provide a response as $CONVERSANT_NAME."
    
    if [[ -n "$CONVERSATION_CONTEXT" ]]; then
        initial_prompt="$initial_prompt $CONVERSATION_CONTEXT"
    fi
    
    # Add instruction to end the session
    initial_prompt="$initial_prompt

After providing your response, please type 'END_SESSION' to conclude this turn."
    
    # Use ks_claude_conversation for proper logex integration
    if claude_output=$(ks_claude_conversation "$initial_prompt" 120); then
        claude_exit_code=0
        log_info "Claude session completed successfully"
    else
        claude_exit_code=$?
        log_error "Claude session failed with exit code: $claude_exit_code"
        claude_output="Error: Claude session failed or timed out"
    fi
    
    # Process and record the Claude response
    if [[ $claude_exit_code -eq 0 && -n "$claude_output" ]]; then
        # Record the actual Claude response
        record_conversant_event "response_generated" "$claude_output"
        log_info "Claude response captured: ${#claude_output} characters"
        
        # Parse and execute any tool commands in Claude's response
        parse_and_execute_tools "$claude_output" "$conversant_dir"
        
        # Check for any events captured during the session
        check_knowledge_capture
        
        # Output for orchestrator
        echo "Real Claude session for $CONVERSANT_NAME"
        echo "Working directory: $conversant_dir"
        echo "Response: $claude_output"
    else
        # Handle failure case
        record_conversant_event "session_failed" "exit_code: $claude_exit_code, output: $claude_output"
        log_error "Claude session failed for $CONVERSANT_NAME"
        
        # Provide fallback response to keep conversation flowing
        local fallback_response="I'm $CONVERSANT_NAME, but I'm having trouble responding right now."
        echo "Claude session failed for $CONVERSANT_NAME"
        echo "Fallback response: $fallback_response"
        
        # Record fallback
        record_conversant_event "fallback_response" "$fallback_response"
    fi
    
    record_conversant_event "session_completed" "exit_code: $claude_exit_code, response_length: ${#claude_output}"
}

parse_and_execute_tools() {
    local claude_response="$1"
    local conversant_dir="$2"
    local tools_executed=0
    
    log_info "Parsing Claude response for tool commands"
    
    # Parse tool commands from Claude response using regex patterns
    # Pattern 1: `tools/capture/events TYPE "TOPIC" "CONTENT"`
    # Pattern 2: `tools/capture/query "SEARCH" --days N`
    # Pattern 3: Other tools/analyze/* tool commands
    
    # Save current working directory  
    local original_pwd="$PWD"
    
    # We're already in the conversant directory from run_claude_session
    # No need to cd again - just verify we have the tools
    if [[ ! -L "tools" ]]; then
        log_error "Tools symlink not found in conversant directory: $PWD"
        return 1
    fi
    
    # Override only the output paths for capture tools (keep KS_ROOT for library loading)
    # CONVERSATION_DIR is now always absolute from orchestrate-worker
    export KS_HOT_LOG="$CONVERSATION_DIR/knowledge/events/hot.jsonl"
    export KS_DERIVED_DIR="$CONVERSATION_DIR/knowledge/derived"
    export KS_TOOLS_DIR="$CONVERSATION_DIR/tools"
    
    # Execute tool commands with experiment environment
    while read -r tool_line; do
        if [[ -n "$tool_line" ]]; then
            log_info "Executing parsed tool command: $tool_line"
            
            # Execute the tool command and capture result
            local tool_output
            local tool_exit_code
            if tool_output=$(eval "$tool_line" 2>&1); then
                tool_exit_code=0
                tools_executed=$((tools_executed + 1))
                log_info "Tool executed successfully: $tool_line"
                
                # Record tool execution event
                record_conversant_event "tool_executed" "command: $tool_line, output: $tool_output"
            else
                tool_exit_code=$?
                log_error "Tool execution failed: $tool_line (exit code: $tool_exit_code)"
                record_conversant_event "tool_failed" "command: $tool_line, exit_code: $tool_exit_code, output: $tool_output"
            fi
        fi
    done < <(
        # Extract tools/capture/events commands
        echo "$claude_response" | grep -E '`\s*tools/capture/events\s+\w+\s+[^`]+`' | sed 's/.*`\s*\(tools\/capture\/events[^`]*\)`.*/\1/' | \
        while read -r line; do
            # Clean up the line and validate it looks like a proper events command
            if [[ "$line" =~ ^tools/capture/events[[:space:]]+[[:alnum:]_]+[[:space:]]+.+ ]]; then
                echo "$line"
            fi
        done
        
        # Extract tools/capture/query commands
        echo "$claude_response" | grep -E '`\s*tools/capture/query\s+[^`]+`' | sed 's/.*`\s*\(tools\/capture\/query[^`]*\)`.*/\1/' | \
        while read -r line; do
            # Clean up the line and validate it looks like a proper query command
            if [[ "$line" =~ ^tools/capture/query[[:space:]].+ ]]; then
                echo "$line"
            fi
        done
        
        # Extract other tools/* commands (analyze tools, etc.)
        echo "$claude_response" | grep -E '`\s*tools/(analyze|kg|utils)/[^`]*`' | sed 's/.*`\s*\(tools\/[^`]*\)`.*/\1/' | \
        while read -r line; do
            # Output tool command as-is
            echo "$line"
        done
    )
    
    # Restore original working directory
    cd "$original_pwd" || log_error "Failed to restore working directory: $original_pwd"
    
    log_info "Tool parsing complete: $tools_executed tools executed"
    
    if [[ $tools_executed -gt 0 ]]; then
        record_conversant_event "tools_parsed" "tools_executed: $tools_executed"
    fi
}

check_knowledge_capture() {
    local conversant_dir="$CONVERSATION_DIR/conversants/$CONVERSANT_NAME"
    local events_count=0
    
    # Check if any events were captured during the Claude session
    if [[ -f "$conversant_dir/events/hot.jsonl" ]]; then
        events_count=$(wc -l < "$conversant_dir/events/hot.jsonl" 2>/dev/null | tr -d ' ' || echo "0")
        if [[ $events_count -gt 0 ]]; then
            log_info "Knowledge capture: $events_count events recorded during session"
            record_conversant_event "knowledge_captured" "events_count: $events_count"
        fi
    fi
    
    # Also check the main conversation knowledge directory for events
    local main_events_file="$CONVERSATION_DIR/$KS_CONVERSATION_HOT_LOG"
    if [[ -f "$main_events_file" ]]; then
        local main_events_count
        main_events_count=$(wc -l < "$main_events_file" 2>/dev/null | tr -d ' ' || echo "0")
        if [[ $main_events_count -gt 0 ]]; then
            log_info "Main knowledge capture: $main_events_count events in conversation hot log"
            record_conversant_event "main_knowledge_captured" "events_count: $main_events_count"
        fi
    fi
    
    log_info "Knowledge capture check complete: $events_count conversant events, main events file checked"
}

# Signal handling
handle_shutdown() {
    log_info "Received shutdown signal, cleaning up Claude session"
    record_conversant_event "session_interrupted" "shutdown_signal_received"
    exit 0
}

# Set up signal handlers
trap handle_shutdown TERM INT

# Main execution
main() {
    # Parse command line arguments
    
    # Load conversant configuration (needed before setup)
    load_conversant_config
    
    # Setup environment and logging
    setup_claude_environment
    
    # Run the Claude session
    run_claude_session
    
    log_info "Claude instance completed successfully"
}

# Execute main function
main "$@"